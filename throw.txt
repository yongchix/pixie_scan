src/Calibrator.cpp:        throw GeneralException(ss.str());
src/Calibrator.cpp:        throw GeneralException(ss.str());
src/Calibrator.cpp:        throw GeneralException(ss.str());
src/DetectorDriver.cpp:        throw IOException(ss.str());
src/DetectorDriver.cpp:            throw GeneralException(ss.str());
src/DetectorDriver.cpp:            throw GeneralException(ss.str());
src/DetectorDriver.cpp:    /** Use Exceptions to throw an exception here if sanity check was 
src/DetectorDriver.cpp:        throw GeneralException(ss.str());
src/DetectorDriver.cpp:        throw GeneralException(ss.str());
src/DetectorLibrary.cpp:            throw GeneralException(ss.str());
src/DetectorLibrary.cpp:                throw GeneralException(ss.str());
src/DetectorLibrary.cpp:                throw GeneralException(ss.str());
src/DetectorLibrary.cpp:        throw GeneralException(ss.str());
src/GeCalibProcessor.cpp:            throw GeneralException(ss.str());
src/GeProcessor.cpp:        throw GeneralException(ss.str());
src/GeProcessor.cpp:        throw IOException(ss.str());
src/GeProcessor.cpp:            throw GeneralException("Gamma-gamma gate size different than 2 is \
src/GeProcessor.cpp:        throw GeneralException(ss.str());
src/GeProcessor.cpp:            throw GeneralException(ss.str());
src/GeProcessor.cpp:                    throw NotImplemented("Gamma gates of size different than 2 are not implemented");
src/Globals.cpp:            throw GeneralException(ss.str());
src/Globals.cpp:                    throw GeneralException("Globals: unknown revision version " + revision_);
src/Globals.cpp:                    throw GeneralException("Globals: unknown units " + 
src/Globals.cpp:                throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/Globals.cpp:        throw GeneralException(ss.str());
src/JAEACorrelator.cpp:    throw GeneralWarning(ss.str());
src/JAEACorrelator.cpp:    throw GeneralWarning(ss.str());
src/JAEACorrelator.Dec10.cpp:    throw GeneralWarning(ss.str());
src/JAEACorrelator.Dec10.cpp:    throw GeneralWarning(ss.str());
src/Notebook.cpp:        throw IOException(ss.str());
src/Notebook.cpp:        throw IOException(ss.str());
src/Notebook.cpp:        throw IOException(ss.str());
src/Notebook.cpp:        throw IOException(ss.str());
src/PixieStd.cpp:                // throw away previous collected data and start fresh
src/PixieStd.cpp:        throw GeneralException(ess.str());
src/PixieStd.cpp:        * before processing data. SanityCheck function throws exception if
src/PlaceBuilder.cpp:        throw GeneralException(ss.str());
src/Places.cpp:        throw GeneralException(ss.str());
src/Places.cpp:        throw GeneralException(ss.str());
src/Places.cpp:        throw GeneralException(ss.str());
src/Plots.cpp:        throw HistogramException(ss.str());
src/Plots.cpp:        throw HistogramException(ss.str());
src/Plots.cpp:        throw HistogramException(ss.str());
src/Plots.cpp:        throw HistogramException(ss.str());
src/PlotsRegister.cpp:        throw HistogramException(ss.str());
src/PlotsRegister.cpp:        throw HistogramException(ss.str());
src/PlotsRegister.cpp:        throw HistogramException(ss.str());
src/pugixml.cpp:		void* allocate_nothrow(size_t size)
src/pugixml.cpp:			void* result = allocate_nothrow(size);
src/pugixml.cpp:				throw std::bad_alloc();
src/pugixml.cpp:		void throw_error(const char* message)
src/pugixml.cpp:			throw xpath_exception(*_result);
src/pugixml.cpp:		void throw_error_oom()
src/pugixml.cpp:			throw_error("Out of memory");
src/pugixml.cpp:			throw std::bad_alloc();
src/pugixml.cpp:			void* result = _alloc->allocate_nothrow(sizeof(xpath_ast_node));
src/pugixml.cpp:			if (!result) throw_error_oom();
src/pugixml.cpp:				char_t* c = static_cast<char_t*>(_alloc->allocate_nothrow((length + 1) * sizeof(char_t)));
src/pugixml.cpp:				if (!c) throw_error_oom();
src/pugixml.cpp:			if (argc == 1 && args[0]->rettype() != xpath_type_node_set) throw_error("Function has to be applied to node set");
src/pugixml.cpp:					if (args[0]->rettype() != xpath_type_node_set) throw_error("Function has to be applied to node set");
src/pugixml.cpp:					if (args[0]->rettype() != xpath_type_node_set) throw_error("Function has to be applied to node set");
src/pugixml.cpp:			throw_error("Unrecognized function or wrong parameter count");
src/pugixml.cpp:					throw_error("Unknown variable: variable set is not provided");
src/pugixml.cpp:					throw_error("Unknown variable: variable set does not contain the given name");
src/pugixml.cpp:					throw_error("Unmatched braces");
src/pugixml.cpp:					throw_error_oom();
src/pugixml.cpp:					throw_error("Unrecognized function call");
src/pugixml.cpp:						throw_error("No comma between function arguments");
src/pugixml.cpp:				throw_error("Unrecognizable primary expression");
src/pugixml.cpp:				if (n->rettype() != xpath_type_node_set) throw_error("Predicate has to be applied to node set");
src/pugixml.cpp:					throw_error("Unmatched square brace");
src/pugixml.cpp:				throw_error("Step has to be applied to node set");
src/pugixml.cpp:					if (axis_specified) throw_error("Two axis specifiers in one step");
src/pugixml.cpp:					if (!axis_specified) throw_error("Unknown axis");
src/pugixml.cpp:					else throw_error("Unrecognized node test");
src/pugixml.cpp:							if (nt_type == nodetest_none) throw_error("Unrecognized node type");
src/pugixml.cpp:								throw_error("Only literals are allowed as arguments to processing-instruction()");
src/pugixml.cpp:								throw_error("Unmatched brace near processing-instruction()");
src/pugixml.cpp:							throw_error("Unmatched brace near node type test");
src/pugixml.cpp:			else throw_error("Unrecognized node test");
src/pugixml.cpp:					throw_error("Unmatched square brace");
src/pugixml.cpp:						if (n->rettype() != xpath_type_node_set) throw_error("Step has to be applied to node set");
src/pugixml.cpp:					throw_error("Union operator has to be applied to node sets");
src/pugixml.cpp:				throw_error("Incorrect query");
src/pugixml.cpp:	PUGI__FN const char* xpath_exception::what() const throw()
src/pugixml.cpp:				throw std::bad_alloc();
src/pugixml.cpp:			throw std::bad_alloc();
src/pugixml.cpp:			throw xpath_exception(res);
src/SheCorrelator.cpp:        throw GeneralWarning(ss.str());
src/SheCorrelator.cpp:        throw GeneralWarning(ss.str());
src/temp.cpp:        throw GeneralWarning(ss.str());
src/temp.cpp:        throw GeneralWarning(ss.str());
src/TreeCorrelator.cpp:        throw TreeCorrelatorException(ss.str());
src/TreeCorrelator.cpp:        throw TreeCorrelatorException(ss.str());
src/TreeCorrelator.cpp:                    throw TreeCorrelatorException(ss.str());
src/TreeCorrelator.cpp:                    throw TreeCorrelatorException(ss.str());
src/TreeCorrelator.cpp:        throw IOException(ss.str());
src/WalkCorrector.cpp:        throw GeneralException(ss.str());
src/WalkCorrector.cpp:        throw GeneralException(ss.str());
src/WalkCorrector.cpp:        throw GeneralException(ss.str());
src/WalkCorrector.cpp:                throw GeneralException(ss.str());
src/WalkCorrector.cpp:                throw GeneralException(ss.str());
src/WalkCorrector.cpp:                throw GeneralException(ss.str());
