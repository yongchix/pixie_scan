/** \file NaIProcessor.cpp
 * NaI class takes the signals from the mcp detector
 *   and calculates a 2D position based on the readout
 * SNL 2-2-08, Modified DTM 9-09
 */
#include "DammPlotIds.hpp"
#include "NaIProcessor.hpp"
#include "RawEvent.hpp"
#include<iostream>
#include<fstream>
#include<iomanip>
//#include "Public.hpp" // by Yongchi Xiao; 06/25/205

//#include "Dssd4JAEAProcessor.hpp" // added by Yongchi Xiao; 06/23/2015

using std::string;
using std::vector;
using std::cout;
using std::endl;

using namespace dammIds::nai;
using namespace std;

namespace dammIds { // offset = 930; range = 20
  namespace nai {	
    const int DD_POSENE = 0;
    const int D_SUM1    = 1;
    const int D_SUM2    = 2;
    const int D_SUMALL  = 3;
    const int D_ENE     = 4;
    const int DD_ENE_V_T = 15;
  }
}
void NaIProcessor::NaIData::Clear(void)
{
}

NaIProcessor::NaIProcessor(void) : EventProcessor(OFFSET, RANGE, "nai")
{
  associatedTypes.insert("nai");
}

void NaIProcessor::DeclarePlots(void)
{  
  const int posBins      = S4; //    16
  const int energyBins   = SE; // 16384
  const int energyBins2  = SD; // 8192
  const int energyBins3  = SB; // 2048

  DeclareHistogram2D(DD_POSENE, posBins, energyBins, "NaI Position and Energy"); // 930
  
  DeclareHistogram1D(D_SUM1,energyBins2,"Nai sum 0-3");//931
  DeclareHistogram1D(D_SUM2,energyBins2,"Nai sum 4-7");// 932
  DeclareHistogram1D(D_SUMALL,energyBins2,"Nai sum 0-8");// 933
  
  DeclareHistogram1D(D_ENE,energyBins2,"NaI ch 0"); //934
  DeclareHistogram1D(D_ENE+1,energyBins2,"NaI ch 1");
  DeclareHistogram1D(D_ENE+2,energyBins2,"NaI ch 2");
  DeclareHistogram1D(D_ENE+3,energyBins2,"NaI ch 3");
  DeclareHistogram1D(D_ENE+4,energyBins2,"NaI ch 4");
  DeclareHistogram1D(D_ENE+5,energyBins2,"NaI ch 5");
  DeclareHistogram1D(D_ENE+6,energyBins2,"NaI ch 6");
  DeclareHistogram1D(D_ENE+7,energyBins2,"NaI ch 7");// 941

  DeclareHistogram2D(DD_ENE_V_T,energyBins2,energyBins3,"NaI Energy vs. time");
 
}


//--------------------- some external variables; by Yongchi Xiao; 06/24/2015
extern bool protonCaught; // by Yongchi XIao; 06/24/2015
extern double protonTime; // from DSSD4JAEAProcessor.cpp
//--------------------------------------------------------------------------

bool NaIProcessor::Process(RawEvent &event)
{
  using std::cout;
  using std::endl;

  //  std::cout << "Processing::NaI" << endl;

  if (!EventProcessor::Process(event))
    return false;

  static const vector<ChanEvent*> &naiEvents = sumMap["nai"]->GetList();
  
  double sum1=0;
  double sum2=0;
  double sumall=0;
  
  data.Clear();

  static NaiEvent groupNaiEvents[8]; // by Yongchi Xiao; 06/24/2015	

  for (vector<ChanEvent*>::const_iterator it = naiEvents.begin();
       it != naiEvents.end(); it++) {

    //    cout << "haha " << endl;

      ChanEvent *chan = *it;

      string subtype   = chan->GetChanID().GetSubtype();
      int number 	= chan->GetChanID().GetLocation();
      double calEnergy = chan->GetCalEnergy();
      double naiTime   = chan->GetTime();

      if(number<=8)
	{
	  plot(DD_POSENE,number,calEnergy);
	  plot(D_ENE+number,calEnergy);
	  sumall+=calEnergy;
	}
      if(number<=3)               sum1+=calEnergy; // sum over ch 0-3
      if(number>=4 && number <=7) sum2+=calEnergy; // sum over ch 4-7
   
      if(sum1>0) plot(D_SUM1,sum1);
      if(sum2>0) plot(D_SUM2,sum2);
      if(sumall>0) plot(D_SUMALL,sumall);	
      //  cout << (naiTime - 1.0414e11)/1e7 << endl; 
      // plot(DD_ENE_V_T,(naiTime - 1.0414e11)/1e8,calEnergy/5);




      //--------------------------- by Yongchi Xiao; 06/23/2015 ---------------------------
      //static vector<NaiEvent> vecNaiEvents; // by Yongchi Xiao; 06/18/2015
      
      NaiEvent naiev;

      //if(protonCaught == true)
	{
	  if( (calEnergy < 250) && (calEnergy > 195) ) // pick a possible 511keV signal
	    {
	      naiev.energy = calEnergy;
	      naiev.channel = number;
	      naiev.time = naiTime;
	      //naiev.Output();
	      groupNaiEvents[naiev.channel] = naiev;
	      //groupNaiEvents[naiev.channel].Output();
	    }
	  
	  
	  int pairIsFound = -1;
	  
	  if( (groupNaiEvents[0].time > 0 && groupNaiEvents[2].time > 0) && abs(groupNaiEvents[0].time - groupNaiEvents[2].time) <= 2 ) pairIsFound = 1;
	  if( (groupNaiEvents[1].time > 0 && groupNaiEvents[3].time > 0) && abs(groupNaiEvents[1].time - groupNaiEvents[3].time) <= 2 ) pairIsFound = 2;
	  if( (groupNaiEvents[4].time > 0 && groupNaiEvents[6].time > 0) && abs(groupNaiEvents[4].time - groupNaiEvents[6].time) <= 2 ) pairIsFound = 3;
	  if( (groupNaiEvents[5].time > 0 && groupNaiEvents[7].time > 0) && abs(groupNaiEvents[5].time - groupNaiEvents[7].time) <= 2 ) pairIsFound = 4;
	  
	  
	  { 
	    //if(pairIsFound > 0) cout << setprecision(12) << protonTime << endl;
	    if(pairIsFound > 0) cout << "NaI pair is found!" << endl;
	    switch(pairIsFound){
	      
		case 1: {groupNaiEvents[0].Output(); groupNaiEvents[0].Clear(); groupNaiEvents[2].Output(); groupNaiEvents[2].Clear();break;}  
		case 2: {groupNaiEvents[1].Output(); groupNaiEvents[1].Clear(); groupNaiEvents[3].Output(); groupNaiEvents[3].Clear();break;}  
		case 3: {groupNaiEvents[4].Output(); groupNaiEvents[4].Clear(); groupNaiEvents[6].Output(); groupNaiEvents[6].Clear();break;}  
		case 4: {groupNaiEvents[5].Output(); groupNaiEvents[5].Clear(); groupNaiEvents[7].Output(); groupNaiEvents[7].Clear();break;}    
	      
	      /*
	    case 1: {cout << "Time interval: " << (groupNaiEvents[0].time - protonTime) << endl; groupNaiEvents[0].Clear(); groupNaiEvents[2].Clear();break;}  
	    case 2: {cout << "Time interval: " << (groupNaiEvents[1].time - protonTime) << endl; groupNaiEvents[1].Clear(); groupNaiEvents[3].Clear();break;}  
	    case 3: {cout << "Time interval: " << (groupNaiEvents[4].time - protonTime) << endl; groupNaiEvents[4].Clear(); groupNaiEvents[6].Clear();break;}  
	    case 4: {cout << "Time interval: " << (groupNaiEvents[5].time - protonTime) << endl; groupNaiEvents[5].Clear(); groupNaiEvents[7].Clear();break;}     
	      */ 
	    }
	    
	    //protonCaught = false;
	  }
	}
      //-----------------------------------------------------------------------------------

  }// end of loop for searching naiEvents;
  
  
  EndProcess();
  return true;
}
