/*! \file Dssd4JAEAProcessor.cpp
 *
 * The DSSD processor handles detectors of type dssd_front and dssd_back and
 *   determines whether the events are implants or decays and informs the
 *   correlator accordingly
 */

#include <algorithm>
#include <iomanip>
#include <limits>
#include <sstream>
#include <stdexcept>
#include <signal.h>
#include <limits.h>
#include "Dssd4JAEAProcessor.hpp"
#include "DammPlotIds.hpp"
#include "Globals.hpp"
#include "Messenger.hpp"
#include "Notebook.hpp"
#include "RawEvent.hpp"

#include "CfdAnalyzer.hpp"
#include "DoubleTraceAnalyzer.hpp"
#include "FittingAnalyzer.hpp"
#include "TauAnalyzer.hpp"
#include "TraceAnalyzer.hpp"
#include "TraceExtracter.hpp"
#include "TraceFilterer.hpp"
#include "WaveformAnalyzer.hpp"
#include "DetectorDriver.hpp"
#include "Notebook.hpp"

using namespace dammIds::dssd4jaea;
using namespace std;


Dssd4JAEAProcessor::Dssd4JAEAProcessor(double timeWindow,
                                       double deltaEnergy,
				       double recoilEnergyCut,
                                       double highEnergyCut,
                                       double lowEnergyCut,
                                       double fissionEnergyCut,
                                       int numBackStrips,
                                       int numFrontStrips) :
  EventProcessor(OFFSET, RANGE, "dssd4jaea"),

    correlator_(numBackStrips, numFrontStrips)
{
    timeWindow_ = timeWindow;
    deltaEnergy_ = deltaEnergy;
    recoilEnergyCut_ = recoilEnergyCut;
    highEnergyCut_ = highEnergyCut;
    lowEnergyCut_ = lowEnergyCut;
    fissionEnergyCut_ = fissionEnergyCut;
    name = "dssd";
    associatedTypes.insert("dssd_front_jaea");
    associatedTypes.insert("dssd_back_jaea");
    numDoubleTraces=0;
    
    stringstream ss;
    ss << fixed 
       << "#T" 
       << " " << setw(12) << "E (keV)"
       << " " << setw(12) << "t (ms)"  
       << " M" << " "
       << " B" << " "
       << " V" << " "
       << " E" << " "
       << endl;
    Notebook::get()->report(ss.str());
}


void Dssd4JAEAProcessor::DeclarePlots(void)
{
  using namespace dammIds::dssd;
  //using namespace dammIds::trace::doubletraceanalyzer;
 
  //   TraceFilterer::DeclarePlots();

    const int energyBins = SE;  // 16384   
    const int energyBins2 = SB; //  2048
    const int implantEnergyBins = SF; //SE
    const int xBins = S6;       //    64
    const int yBins = S6;       //    64
    const int timeBins = S8;    //   256
    const int decayEnergyBins = SD; // 8192
    const int decayEnergyBins2= SA; // 1024
    const int positionBins = S6;
    const int posBins = SE;
    unsigned short numTraces = Globals::get()->numTraces();
    
    // Diagnostic plot in PreProcessor 
    //1700
    DeclareHistogram2D(DD_DSSDFRONT_POSENERGY, 
		       xBins, energyBins, "DSSD front position and energy");
    //1701
    DeclareHistogram2D(DD_DSSDBACK_POSENERGY, 
		       xBins, energyBins, "DSSD back position and energy");
    
    // Diagnostic plot in Processor 
    // 1810 : DSSD hit pattern without MWPC hit
    DeclareHistogram2D(DD_EVENT_POSITION_WITHOUT_MWPC, 
		       xBins, energyBins, "DSSD hit pattern without MWPC");
    // 1811 : Dssd front position vs energy wihtout MWPC
    DeclareHistogram2D(DD_DSSDFRONT_POSENERGY_WITHOUT_MWPC, 
		       xBins, energyBins, "DSSD front position vs energy without MWPC hit");
    // 1812 : Dssd back position vs energy wihtout MWPC
    DeclareHistogram2D(DD_DSSDBACK_POSENERGY_WITHOUT_MWPC, 
		       xBins, energyBins, "DSSD back pos vs energy without MWPC hit");
    
    
    

    ////////////////// Check Consistency  /////////

    
    // 1825 checked
    DeclareHistogram2D(DD_IMPLANT_POSITION, 
		       positionBins, positionBins, "DSSD Hit Pattern - R");
    // 1826 checked
    DeclareHistogram2D(DD_DECAY_POSITION, 
		       positionBins, positionBins, "DSSD Hit Pattern - D");
    // 1841 checked
    DeclareHistogram2D(DD_IMPLANT_FRONT_ENERGY__POSITION,  
		       implantEnergyBins, positionBins, "DSSD Strip vs E - RF");
    // 1842 checked 
    DeclareHistogram2D(DD_IMPLANT_BACK_ENERGY__POSITION,
		       implantEnergyBins, positionBins, "DSSD Strip vs E - RB");
    // 1843 checked 
    DeclareHistogram2D(DD_DECAY_FRONT_ENERGY__POSITION,
		       decayEnergyBins, positionBins, "DSSD Strip vs E - DF");
    // 1844 checked
    DeclareHistogram2D(DD_DECAY_BACK_ENERGY__POSITION, 
		       decayEnergyBins, positionBins, "DSSD Strip vs E - DB");
       
    // 1850-1859 
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 0, energyBins, timeBins,
		       "DSSD Ty,Ex (10ns/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 1, energyBins, timeBins, 
		       "DSSD Ty,Ex (100ns/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 2, energyBins, timeBins,
		       "DSSD Ty,Ex (400ns/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 3, energyBins, timeBins,
		       "DSSD Ty,Ex (1us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 4, energyBins, timeBins, 
		       "DSSD Ty,Ex (10us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 5, energyBins, timeBins,
		       "DSSD Ty,Ex (100us/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 6, energyBins, timeBins,
		       "DSSD Ty,Ex (1ms/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 7, energyBins, timeBins,
		       "DSSD Ty,Ex (10ms/ch)(xkeV)");
    DeclareHistogram2D(DD_ENERGY_DECAY_TIME_GRANX + 8, energyBins, timeBins,
		       "DSSD Ty,Ex (100ms/ch)(xkeV)");


    // 1859 checked
    DeclareHistogram1D(D_DECAY_FRONT_ENERGY,
                       decayEnergyBins, "DSSD Energy Front");  
    // 1860 checked
    DeclareHistogram1D(D_DECAY_BACK_ENERGY,
                       decayEnergyBins, "DSSD Energy Back");
    // 1861
    DeclareHistogram2D(DD_IMPLANT_POSITION__MCP,
		       posBins, positionBins, "DSSD Front Strip vs MCP_Tac");

    // 1873 
    DeclareHistogram2D(DD_ENERGY2F_DT, decayEnergyBins, decayEnergyBins2, 		       "DSSD Ty,Ex traces (10ns/ch)(xkeV)");
    // 1874 
    DeclareHistogram2D(DD_ENERGY2F_ENERGY1F, decayEnergyBins, decayEnergyBins2, 
		       "E1 vs E2");
    // 1875
    DeclareHistogram2D(DD_ENERGY2B_ENERGY1B, decayEnergyBins, decayEnergyBins2, 
		       "E1 vs E2");
    // 1876 checked
    DeclareHistogram2D(DD_DOUBLETRACE_FRONT_WITHOUT_MWPC, 
		       SA, numTraces, "Double traces at front with mcp");
    // 1876 checked  
    DeclareHistogram2D(DD_DOUBLETRACE_BACK_WITHOUT_MWPC, 
		       SA, numTraces, "Double traces at back with mcp");
    

}


bool Dssd4JAEAProcessor::PreProcess(RawEvent &event) {
    if (!EventProcessor::PreProcess(event))
        return false;

    xyEventsTMatch_.clear();
    xyEventsEMatch_.clear();
    
    vector<ChanEvent*> xEvents = 
      event.GetSummary("dssd_front_jaea:dssd_front_jaea",true)->GetList();
    vector<ChanEvent*> yEvents = 
      event.GetSummary("dssd_back_jaea:dssd_back_jaea",true)->GetList();
    
    // only for the diagnostic
        double trace_energy1F=0,trace_time1F=0;
    double trace_energy2F=0,trace_time2F=0;
    double trace_energy1B=0,trace_time1B=0;
    double trace_energy2B=0,trace_time2B=0;

    unsigned int frontPos = INT_MAX, backPos = INT_MAX;
    double frontEnergy,backEnergy,frontTime = 0;
    Trace frontTrace,backTrace;
    
    bool hasFront = (event.GetSummary("dssd_front_jaea",true)->GetMult()>0);
    bool hasBack  = (event.GetSummary("dssd_back_jaea",true)->GetMult()>0);
    int multfront = event.GetSummary("dssd_front_jaea",true)->GetMult();
    int multback  = event.GetSummary("dssd_back_jaea",true)->GetMult();
   
    vector< pair<StripEvent, bool> > xEventsTMatch;
    vector< pair<StripEvent, bool> > yEventsTMatch;
    StripEvent ev2x;
    StripEvent ev2y;
    
    for (vector<ChanEvent*>::iterator itx = xEvents.begin();
         itx != xEvents.end();
         ++itx) {
        StripEvent ev((*itx)->GetCalEnergy(), 
                      (*itx)->GetTime(),
                      (*itx)->GetChanID().GetLocation(),
                      (*itx)->IsSaturated(),
		      (*itx)->GetTrace());
	pair<StripEvent, bool> match(ev, false);
        xEventsTMatch.push_back(match);

       
        const Trace& traceF = (*itx)->GetTrace();
	frontEnergy = ev.E;
	frontPos    = ev.pos;
	
	if(traceF.HasValue("filterEnergy")){
	  trace_energy1F = traceF.GetValue("filterEnergy");
	  trace_time1F   = traceF.GetValue("filterTime");
	}
	if(traceF.HasValue("filterEnergy2")){
	  trace_energy2F = traceF.GetValue("filterEnergy2");
	  trace_time2F   = traceF.GetValue("filterTime2");
	}
       

        /** Handle additional pulses (no. 2, 3, ...) */
        int pulses = traceF.GetValue("numPulses");
        for (int i = 1; i < pulses; ++i) {
            stringstream energyCalName;
            energyCalName << "filterEnergy" << i + 1 << "Cal";
            stringstream timeName;
            timeName << "filterTime" << i + 1;

            ev.pileup = true;

	    ev2x.E = traceF.GetValue(energyCalName.str());
            ev2x.t = (traceF.GetValue(timeName.str()) - 
                     traceF.GetValue("filterTime") + ev.t);
            ev2x.pos = ev.pos;
            ev2x.sat = false;
            ev2x.pileup = true;
	    
            pair<StripEvent, bool> match2(ev2x, false);
            xEventsTMatch.push_back(match2);
	    

        }
	
	for (vector<ChanEvent*>::iterator itx2 = itx;
	     itx2 != xEvents.end();
	     ++itx2) {
	  int dx = abs( ev.pos -  (*itx2)->GetChanID().GetLocation());
	  double dE = abs( ev.E - (*itx2)->GetCalEnergy());
	}
	
    }

    for (vector<ChanEvent*>::iterator ity = yEvents.begin();
         ity != yEvents.end();
         ++ity) {
        StripEvent ev((*ity)->GetCalEnergy(), 
                      (*ity)->GetTime(),
                      (*ity)->GetChanID().GetLocation(),
                      (*ity)->IsSaturated(),
		      (*ity)->GetTrace());
        pair<StripEvent, bool> match(ev, false);
        yEventsTMatch.push_back(match);
	
	//
	const Trace& traceB = (*ity)->GetTrace();
	backEnergy = ev.E;
	backPos    = ev.pos;
	plot(DD_DSSDBACK_POSENERGY,backPos,backEnergy);
	if(traceB.HasValue("filterEnergy")){
	  trace_energy1B = traceB.GetValue("filterEnergy");
	  trace_time1B   = traceB.GetValue("filterTime");
	}
	if(traceB.HasValue("filterEnergy2")){
	  trace_energy2B = traceB.GetValue("filterEnergy2");
	  trace_time2B   = traceB.GetValue("filterTime2");
	}
	//

        int pulses = traceB.GetValue("numPulses");

        for (int i = 1; i < pulses; ++i) {
            stringstream energyCalName;
            energyCalName << "filterEnergy" << i + 1 << "Cal";
            stringstream timeName;
            timeName << "filterTime" << i + 1;

            ev.pileup = true;
	    
            ev2y.E = traceB.GetValue(energyCalName.str());
            ev2y.t = (traceB.GetValue(timeName.str()) - 
                     traceB.GetValue("filterTime") + ev.t);
            ev2y.pos = ev.pos;
            ev2y.sat = false;
            ev2y.pileup = true;
            pair<StripEvent, bool> match2(ev2y, false);
            yEventsTMatch.push_back(match2);
	    
	}
	
        for (vector<ChanEvent*>::iterator ity2 = ity;
	     ity2 != yEvents.end();
	     ++ity2) {
	  int dy = abs( ev.pos  - (*ity2)->GetChanID().GetLocation());
	  double dE = abs( ev.E - (*ity2)->GetCalEnergy());
	}
	
    }

    
    
    for (vector< pair<StripEvent, bool> >::iterator itx = xEventsTMatch.begin();
         itx != xEventsTMatch.end();
         ++itx) {
      double bestDtime = numeric_limits<double>::max();
      vector< pair<StripEvent, bool> >::iterator bestMatch =
	yEventsTMatch.end();
      for (vector< pair<StripEvent, bool> >::iterator ity = 
	     yEventsTMatch.begin();
	   ity != yEventsTMatch.end();
	   ++ity) 
	{
	  if ((*ity).second)
	    continue;
	  
	  double energyX = (*itx).first.E;
	  double energyY = (*ity).first.E;
	  double dTime = abs((*itx).first.t - (*ity).first.t) *
	    Globals::get()->clockInSeconds();
	  if (dTime < bestDtime) {
	    bestDtime = dTime;
	    bestMatch = ity;
	  }
	}
      
      if (bestDtime < timeWindow_) {
	xyEventsTMatch_.push_back(
	pair<StripEvent, StripEvent>((*itx).first, (*bestMatch).first));
	(*itx).second = true;
	(*bestMatch).second = true;
      } else {
	bestDtime = int(bestDtime / 1.0e-8);
	if (bestDtime > S8)
	  bestDtime = S8 - 1;
	else if (bestDtime < 0)
	  bestDtime = 0;
      }
    }
    
    
      

    if (xEvents.size() > 0 && yEvents.size() > 0) {
      ChanEvent* maxFront =
	event.GetSummary("dssd_front_jaea:dssd_front_jaea")->GetMaxEvent(true);
      ChanEvent* maxBack = 
	event.GetSummary("dssd_back_jaea:dssd_back_jaea")->GetMaxEvent(true);
      
      StripEvent evf(maxFront->GetCalEnergy(), 
		     maxFront->GetTime(),
		     maxFront->GetChanID().GetLocation(),
		     maxFront->IsSaturated(),
		     maxFront->GetTrace());
      StripEvent evb(maxBack->GetCalEnergy(), 
		     maxBack->GetTime(),
		     maxBack->GetChanID().GetLocation(),
		     maxBack->IsSaturated(),
		     maxBack->GetTrace());
      xyEventsEMatch_.push_back(pair<StripEvent, StripEvent>(evf, evb));
      
      }
    


    
    return true; 
}


bool Dssd4JAEAProcessor::Process(RawEvent &event)
{
  
  using namespace dammIds::dssd4jaea;
  
  if (!EventProcessor::Process(event))
        return false;
  

  double cutoffEnergy=6500;

  vector<ChanEvent*> pinEvents = 
    event.GetSummary("pin:pin", true)->GetList();
  vector<ChanEvent*> NaIEvents = 
    event.GetSummary("nai:nai", true)->GetList();
  vector<ChanEvent*> mwpcEvents = 
    event.GetSummary("mcp:mcp", true)->GetList();
  vector<ChanEvent*> xEvents = 
    event.GetSummary("dssd_front_jaea:dssd_front_jaea",true)->GetList();
  vector<ChanEvent*> yEvents = 
    event.GetSummary("dssd_back_jaea:dssd_back_jaea",true)->GetList();
  
  static Correlator &corr = event.GetCorrelator();

  bool hasPin = false;
  bool hasMcp  = false;
  bool hasNaI  = false;
  bool hasFront = false;
  bool hasBack  = false;
    
  int mult_pin  = event.GetSummary("pin", true)->GetMult();
  int mult_mwpc = event.GetSummary("mcp", true)->GetMult();
  int mult_nai  = event.GetSummary("nai", true)->GetMult();
  int mult_dssd_front = event.GetSummary("dssd_front_jaea",true)->GetMult();
  int mult_dssd_back = event.GetSummary("dssd_back_jaea",true)->GetMult();
  
  if(pinEvents.size() > 0){ hasPin=true; }
  if(mult_mwpc > 0){ hasMcp=true;}
  if(mult_nai  > 0){ hasNaI=true;}
  if(mult_dssd_front>0){hasFront=true;}
  if(mult_dssd_back>0){hasBack=true;}
  
  unsigned int frontPos=INT_MAX,backPos=INT_MAX;
  double frontEnergy,backEnergy,frontTime=0;

  double time;
  double static mwpcTime;
  static int traceNum;
  static int traceNum_with_mcp;



  for (vector< pair<StripEvent, StripEvent> >::iterator it =
	 xyEventsTMatch_.begin();
       it != xyEventsTMatch_.end(); ++it)
    {
      int xPosition = (*it).first.pos;
      int yPosition = (*it).second.pos;
      double xEnergy = (*it).first.E;
      double yEnergy = (*it).second.E;
      Trace& xTrace  = (*it).first.tr;
      Trace& yTrace  = (*it).second.tr;
      int xpulses = xTrace.GetValue("numPulses"); 
      int ypulses = yTrace.GetValue("numPulses"); 
      
      double trace_energy1F=0,trace_time1F=0;
      double trace_energy2F=0,trace_time2F=0;
      double trace_energy1B=0,trace_time1B=0;
      double trace_energy2B=0,trace_time2B=0;
      int hasPileup = (*it).first.pileup;
      time = min((*it).first.t, (*it).second.t);
      
      for (vector<ChanEvent*>::iterator itm = mwpcEvents.begin();
	   itm != mwpcEvents.end();
	   ++itm) {
	mwpcTime = (*itm)->GetTime();
	//	MwpcE = (*itm) -> GetCalEnergy();
	}
      
      
      if(!hasMcp){
	
	plot(DD_EVENT_POSITION_WITHOUT_MWPC, xPosition, yPosition);
	plot(DD_DSSDFRONT_POSENERGY_WITHOUT_MWPC,xPosition,xEnergy);
	plot(DD_DSSDFRONT_POSENERGY_WITHOUT_MWPC,yPosition,yEnergy);
	
	// VETO (PIN)
	if(pinEvents.size()>0){
	  for (vector<ChanEvent*>::iterator itv = pinEvents.begin();
	       itv != pinEvents.end();
	       ++itv) {
	    double pinEnergy = (*itv)->GetCalEnergy();
	  }
	}
	if(xpulses>1 && ypulses>1){
	  if(xTrace.HasValue("filterEnergy")){
	    trace_energy1F = xTrace.GetValue("filterEnergy");
	    trace_time1F   = xTrace.GetValue("filterTime");
	  };
	  if(xTrace.HasValue("filterEnergy2")){
	    trace_energy2F = xTrace.GetValue("filterEnergy2");
	    trace_time2F   = xTrace.GetValue("filterTime2");
	  };
	  if(yTrace.HasValue("filterEnergy")){
	    trace_energy1B = yTrace.GetValue("filterEnergy");
	    trace_time1B   = yTrace.GetValue("filterTime");
	  };
	  if(yTrace.HasValue("filterEnergy2")){
	    trace_energy2B = yTrace.GetValue("filterEnergy2");
	    trace_time2B   = yTrace.GetValue("filterTime2");
	  };
	  
	  double DT=trace_time2F-trace_time1F;
	  plot(DD_ENERGY2F_DT,trace_energy2F,DT);
	  plot(DD_ENERGY2F_ENERGY1F,trace_energy2F,trace_energy1F);
	  plot(DD_ENERGY2B_ENERGY1B,trace_energy2B,trace_energy1B);
	  
	  cout << "NEW=====" << trace_energy1F << " " <<trace_energy2F << " " << trace_energy1B << " " << trace_energy2B << endl;
	  
	  for(vector<int>::iterator it = xTrace.begin();it != xTrace.end();it++){	   
	    plot(DD_DOUBLETRACE_FRONT_WITHOUT_MWPC,it-xTrace.begin(),traceNum,*it);
	    
	  }
	  for(vector<int>::iterator it = yTrace.begin();it != yTrace.end();it++){	   
	    plot(DD_DOUBLETRACE_BACK_WITHOUT_MWPC,it-yTrace.begin(),traceNum,*it);
	  }
	  traceNum++;
	  
	}
      }
    }

  
  
  if (xEvents.size() > 0) {
    ChanEvent* maxFront =
      event.GetSummary("dssd_front_jaea:dssd_front_jaea")->GetMaxEvent(true);
    StripEvent evf(maxFront->GetCalEnergy(), 
		   maxFront->GetTime(),
		   40-maxFront-> GetChanID().GetLocation(),
		   maxFront->IsSaturated(),
		   maxFront->GetTrace());
    frontPos    = 40-evf.pos;
    frontEnergy = evf.E;
    frontTime   = evf.t;
  }else{frontEnergy=0;}
  if (yEvents.size() > 0) {
    ChanEvent* maxBack = 
      event.GetSummary("dssd_back_jaea:dssd_back_jaea")->GetMaxEvent(true);
    StripEvent evb(maxBack->GetCalEnergy(), 
		   maxBack->GetTime(),
		     40-maxBack->GetChanID().GetLocation(),
		   maxBack->IsSaturated(),
		   maxBack->GetTrace());
      backPos     = 40-evb.pos;
      backEnergy  = evb.E;
  }else{backEnergy=0;}


  bool hasImplant = false;
  bool hasDecay   = false;  

  ////////////////////////
  ////// from old code

  Correlator::EEventType type;
 
  
  ////////////////////////
  ////////////////////////
  ///// from new code
  /*
  bool hasUnknown = false;
  bool hasVeto    = false;
  bool hasBeam    = false;
  bool hasEscape  = false;
  
  double tCalRes=10e-9;
  double tCalEnergy=frontEnergy;
  int mwpc = event.GetSummary("mcp", true)->GetMult();
  
  
  JAEAEvent jaeaevent = JAEAEvent(tCalEnergy, time, mwpc, mwpcTime,
			    hasBeam, hasVeto, hasEscape, unknown);
  pickEventType(jaeaevent);
  
  
  if (jaeaevent.get_type()== alpha) {
    const unsigned int NumGranularities = 8;
    const double timeResolution[NumGranularities] = 
      {10e-9, 100e-9, 400e-9, 1e-6, 100e-6, 1e-3, 10e-3, 100e-3};
    for (unsigned int i = 0; i < NumGranularities; i++) {
      int timeBin = int((jaeaevent.get_time()
			 *Globals::get()->clockInSeconds())*timeResolution[i]);
      double energyBin = jaeaevent.get_energy();
      plot(DD_ENERGY_DECAY_TIME_GRANX + i,frontEnergy*2,timeBin);
    }     
  }
  **/
  //////////////////////////////
  //////////////////////////////
  //////////////////////////////
  
  if(hasFront && hasBack){    
    if (frontEnergy > cutoffEnergy && backEnergy > cutoffEnergy) {
      type = Correlator::IMPLANT_EVENT;
    } else if (frontEnergy <= cutoffEnergy && backEnergy <= cutoffEnergy &&
	       !hasMcp) {
      type = Correlator::DECAY_EVENT;
    } else {
      type = Correlator::UNKNOWN_TYPE;
    }
    corr.CorrelateOld(event,type,frontPos,backPos,frontTime);
    //cout << type << " " << (type==Correlator::DECAY_EVENT) << endl;
  } else if (hasFront) {
    if (frontEnergy > cutoffEnergy) {
      type = Correlator::IMPLANT_EVENT;
    } else type = Correlator::DECAY_EVENT; 
	
  } else if (hasBack) {
    if (backEnergy > cutoffEnergy) {
       type = Correlator::IMPLANT_EVENT; 
    } else type = Correlator::DECAY_EVENT;  
  } else type = Correlator::UNKNOWN_TYPE ;
  
  
  // plot stuff
  if(type == Correlator::IMPLANT_EVENT){
    if (hasFront)
      {
	plot(DD_IMPLANT_FRONT_ENERGY__POSITION, frontEnergy, frontPos); 
      }
    if (hasBack)
      plot(DD_IMPLANT_BACK_ENERGY__POSITION, backEnergy, backPos);
    if (hasFront && hasBack)
      plot(DD_IMPLANT_POSITION, frontPos, backPos); 
  } else if (type==Correlator::DECAY_EVENT) {
    if (hasFront)
      {
	plot(D_DECAY_FRONT_ENERGY, frontEnergy*2);
	plot(DD_DECAY_FRONT_ENERGY__POSITION, frontEnergy*2, frontPos);
      }
    if (hasBack)
      {
	plot(D_DECAY_BACK_ENERGY, backEnergy);
	plot(DD_DECAY_BACK_ENERGY__POSITION, backEnergy, backPos);
      }
    if (hasFront && hasBack){
      plot(DD_DECAY_POSITION, frontPos, backPos);	  
    }
    if(type==Correlator::DECAY_EVENT ) {
    //    if(corr.GetCondition() == Correlator::IMPLANT_EVENT ) {
      const unsigned int NumGranularities = 8;
      cout << corr.GetCondition() << endl;
      // time resolution in seconds per bin
      const double timeResolution[NumGranularities] = 
	{10e-9, 100e-9, 400e-9, 1e-6, 100e-6, 1e-3, 10e-3, 100e-3};
      if(corr.GetCondition()==Correlator::VALID_IMPLANT){
      for (unsigned int i = 0; i < NumGranularities; i++) {
	int timeBin = int(corr.GetDecayTime()*(Globals::get()->clockInSeconds())*timeResolution[i]);
	//int timeBin = (((frontTime-mwpcTime)*Globals::get()->clockInSeconds())*timeResolution[i]);
	//	cout << " " << frontEnergy << " " << corr.GetCondition()  <<endl;
	plot(DD_ENERGY_DECAY_TIME_GRANX + i, frontEnergy*2, timeBin);
      }
      }
    }
  }
  
  
  EndProcess();

    return true;

}

bool Dssd4JAEAProcessor::pickEventType(JAEAEvent& event) {
    /**
     * Logic table (V - veto, M - mwpc, B - beam )
     * Logic state is converted into a numerical value N
     * like a binary number:
     *
     * V M B | N | decision
     * --------------------
     * 0 0 0 | 0 | unknown / alpha / fission (depending on energy)
     * 0 0 1 | 1 | -"-
     * 0 1 0 | 2 | unknown
     * 0 1 1 | 3 | heavyIon
     * 1 0 0 | 4 | unknown
     * 1 0 1 | 5 | lightIon
     * 1 1 0 | 6 | unknown
     * 1 1 1 | 7 | lightIon
     *
     **/
  int condition = 0;
  if (event.get_beam()){ 
    //      cout << "beam!!" << endl;
    condition += 1;
  }
  if (event.get_mwpc() > 0) {
    //cout << "mwpc!!" << endl;
    condition += 2;
  }
  if (event.get_veto()) {
    // cout << "veto!!" << endl;
    condition += 4;
  }
  
  if (condition == 0) {
    double energy = event.get_energy();
      if (energy < highEnergyCut_)
	event.set_type(alpha);
      
      else if (energy < fissionEnergyCut_)
	event.set_type(unknown);
      else 
	event.set_type(fission);
    }
    
    else if (condition == 1) {
        double energy = event.get_energy();
        if (energy < lowEnergyCut_)
            event.set_type(unknown);
        else if (energy < highEnergyCut_)
            event.set_type(alpha);
        else if (energy < fissionEnergyCut_)
            event.set_type(unknown);
        else 
            event.set_type(fission);
    } 
    else if (condition == 2 || 
             condition == 4 ||
             condition == 6) {
        event.set_type(unknown);
    } 
    else if (condition == 3 && event.get_energy() > recoilEnergyCut_) {
        event.set_type(heavyIon);
    }
    else if (condition == 5 || condition == 7) {
        event.set_type(lightIon);
    }
    else
        event.set_type(unknown);
    




    return true;
}
